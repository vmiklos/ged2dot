{"author":{"id":"481cb50d261b0e4d484d2f37647fbc5e449cf0e0242f069e311ff5a555cbf489"},"ops":[{"type":1,"author":{"id":"481cb50d261b0e4d484d2f37647fbc5e449cf0e0242f069e311ff5a555cbf489"},"timestamp":1740242789,"metadata":{"github-id":"I_kwDOANZBd86rIAqf","github-url":"https://github.com/vmiklos/ged2dot/issues/297","origin":"github"},"nonce":"eMaO5CgpBMiIE+QKf8jnhXem2jk=","title":"Possible expansion of the User Guide?","message":"\u003e I asked Perplexity to explain your the interface for ged2dot: \n\nOK. Here's an explanation of how to use `ged2dot.py`, focusing on the command-line interface, and geared toward a beginner.\n\n`ged2dot.py` is a tool that takes a GEDCOM file (a standard file format for genealogical data) as input and generates a Graphviz DOT file as output. The DOT file can then be processed by Graphviz to create a visual family tree. Since there is no GUI, you must use the command line.\n\n**1. Prerequisites**\n\n*   **Python:** You need Python 3 installed on your system. Most Linux distributions and macOS come with Python pre-installed. Windows users might need to download and install it from python.org.\n*   **Graphviz:** You also need Graphviz installed. This is a separate piece of software used to render the DOT file into an image (like a PNG or PDF). You can download it from graphviz.org or install it using your system's package manager (e.g., `apt-get install graphviz` on Debian/Ubuntu, `brew install graphviz` on macOS).\n*   **ged2dot.py:** Download the `ged2dot.py` script from the GitHub repository you linked to. Save it to a location on your computer where you can easily find it.\n\n**2. Basic Command-Line Usage**\n\nThe most basic way to use `ged2dot.py` is like this:\n\n```bash\npython3 ged2dot.py -i input.ged -o output.dot\n```\n\n*   `python3`:  This tells your operating system to use the Python 3 interpreter to run the script.\n*   `ged2dot.py`: This is the name of the script you downloaded.  Make sure your terminal is in the same directory where you saved the script, or provide the full path to the script.\n*   `-i input.ged`: This specifies the input GEDCOM file. Replace `input.ged` with the actual name of your GEDCOM file.\n*   `-o output.dot`: This specifies the output DOT file.  Replace `output.dot` with the desired name for your DOT file.\n\nAfter running this command, a file named `output.dot` will be created. This file contains the Graphviz DOT code representing your family tree.\n\n**3. Generating an Image from the DOT File**\n\nThe `.dot` file by itself isn't an image. You need to use Graphviz to convert it into a viewable format. Here's how you can create a PNG image:\n\n```bash\ndot -Tpng output.dot -o family_tree.png\n```\n\n*   `dot`: This is the Graphviz command-line tool.\n*   `-Tpng`: This specifies the output format as PNG. You can use other formats like `pdf`, `jpg`, `svg`, etc.\n*   `output.dot`: This is the input DOT file that `ged2dot.py` created.\n*   `-o family_tree.png`: This specifies the output file name.  Replace `family_tree.png` with your desired file name.\n\nThis command will create a PNG image named `family_tree.png` that shows your family tree.\n\n**4. Important Options**\n\n`ged2dot.py` has several options to customize the output. Here are some of the most useful ones:\n\n*   `-r` or `--rootfamily`: Specifies the family ID to use as the root of the tree. By default, it uses \"F1\". If your tree isn't displaying correctly, you might need to find the main family ID in your GEDCOM file and use this option.\n    ```bash\n    python3 ged2dot.py -i input.ged -o output.dot -r F42\n    ```\n*   `-d` or `--familydepth`: Controls how many generations are displayed in the tree. The default is 3. Increase this number to show more generations.\n    ```bash\n    python3 ged2dot.py -i input.ged -o output.dot -d 5\n    ```\n*   `--imagedir`: Specifies the directory where images for individuals are stored.  `ged2dot.py` looks for images based on the individual's name.\n    ```bash\n    python3 ged2dot.py -i input.ged -o output.dot --imagedir /path/to/images\n    ```\n*   `--nameorder`:  Determines the order of names (given name first or family name first).  Can be \"little\" (default) or \"big\".\n    ```bash\n     python3 ged2dot.py -i input.ged -o output.dot --nameorder big\n    ```\n*   `--direction`: Sets the direction of the family tree layout.  Can be \"topbottom\", \"leftright\", or \"both\" (default).\n     ```bash\n    python3 ged2dot.py -i input.ged -o output.dot --direction topbottom\n    ```\n\n**5. Example with More Options**\n\nHere's a more complex example that uses several options:\n\n```bash\npython3 ged2dot.py -i my_family.ged -o family.dot -r F12 -d 4 --imagedir images --nameorder big\ndot -Tpdf family.dot -o family_tree.pdf\n```\n\nThis will:\n\n*   Read the GEDCOM data from `my_family.ged`.\n*   Set the root family to \"F12\".\n*   Display 4 generations.\n*   Look for images in the \"images\" directory.\n*   Use \"family name first\" for names.\n*   Create a PDF file named `family_tree.pdf`.\n\n**6. Configuration File (Optional)**\n\nInstead of specifying all the options on the command line, you can use a configuration file. Create a file (e.g., `ged2dot.conf`) with the following structure:\n\n```ini\n[ged2dot]\ninput = my_family.ged\noutput = family.dot\nrootfamily = F12\nfamilydepth = 4\nimagedir = images\nnameorder = big\n```\n\nThen, run `ged2dot.py` with the `-c` option:\n\n```bash\npython3 ged2dot.py -c ged2dot.conf\ndot -Tpdf family.dot -o family_tree.pdf\n```\n\n**7. Troubleshooting**\n\n*   **\"Family not found\"**:  Make sure the `rootfamily` ID is correct.\n*   **No image is generated:**  Verify that Graphviz is installed correctly and that the `dot` command is in your system's PATH.\n*   **Images not showing up:**  Double-check the `imagedir` path and the image file names.  The script looks for images named after the individual, with common image extensions.\n*   **Encoding Errors:** If you get errors related to character encoding, ensure your GEDCOM file is encoded in UTF-8. You might need to re-save it with UTF-8 encoding using a text editor.\n\nBy following these steps, you should be able to use `ged2dot.py` to create visual representations of your family tree from your GEDCOM data. Remember to consult the `ged2dot.py` script itself (especially the comments) for more advanced options and details.\n\nCitations:\n[1] https://github.com/vmiklos/ged2dot/blob/master/ged2dot.py","files":null}]}